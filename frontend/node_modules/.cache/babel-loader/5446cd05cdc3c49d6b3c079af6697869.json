{"ast":null,"code":"var _jsxFileName = \"D:\\\\1. ASE\\\\Anul III\\\\Sem 1\\\\Tehnologii web\\\\Proiect\\\\frontend\\\\src\\\\components\\\\test.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { get, remove } from '../Calls';\nimport { Button, Paper, Table, TableBody, TableCell, TableRow, TableContainer, TableHead, IconButton, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { experientaRoute } from '../ApiRoutes';\nimport { useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataTable() {\n  _s();\n\n  const columns = [{\n    field: 'IDExperienta',\n    headerName: 'ID Experienta',\n    width: 70\n  }, {\n    field: 'PunctPlecare',\n    headerName: 'Punct Plecare',\n    width: 130\n  }, {\n    field: 'PunctSosire',\n    headerName: 'Punct Sosire',\n    width: 130\n  }, {\n    field: 'Localitate',\n    headerName: 'Localitate',\n    width: 90\n  }, {\n    field: 'MijlocTransport',\n    headerName: 'Mijloc Transport',\n    width: 90\n  }, {\n    field: 'OraPlecare',\n    headerName: 'Ora Plecare',\n    width: 90\n  }, {\n    field: 'DurataCalatorie',\n    headerName: 'Durata Calatorie',\n    width: 90,\n    type: 'number'\n  }, {\n    field: 'GradAglomerare',\n    headerName: 'Grad Aglomerare',\n    width: 90,\n    type: 'number'\n  }, {\n    field: 'Observatii',\n    headerName: 'Observatii',\n    width: 90\n  }, {\n    field: 'NivelSatisfactie',\n    headerName: 'Nivel Satisfactie',\n    width: 90,\n    type: 'number'\n  }];\n  const [rows, setRows] = useState([]);\n  let rand = [];\n  useEffect(async () => {\n    let data = await get(experientaRoute);\n    setRows(data);\n    let i = 0;\n\n    for (row in rows) {\n      rand[i] = row;\n      i++;\n    } // rows.map((row) =>(\n    //     rand[i].IDExperienta = row.IDExperienta,\n    //     rand[i].PunctPlecare = row.PunctPlecare,\n    //     rand[i].PunctSosire = row.PunctSosire,\n    //     rand[i].Localitate = row.Localitate,\n    //     rand[i].MijlocTransport = row.MijlocTransport,\n    //     rand[i].OraPlecare = row.OraPlecare,\n    //     rand[i].DurataCalatorie = row.DurataCalatorie,\n    //     rand[i].GradAglomerare = row.GradAglomerare,\n    //     rand[i].Observatii = row.Observatii,\n    //     rand[i++].NivelSatisfactie = row.NivelSatisfactie\n    // ));\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rand,\n      columns: columns,\n      pageSize: 5,\n      rowsPerPageOptions: [5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataTable, \"aEmP4ME4qF+uYWoxBpsZBPdGgb8=\");\n\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["D:/1. ASE/Anul III/Sem 1/Tehnologii web/Proiect/frontend/src/components/test.js"],"names":["useState","useEffect","get","remove","Button","Paper","Table","TableBody","TableCell","TableRow","TableContainer","TableHead","IconButton","TextField","AddIcon","DeleteIcon","EditIcon","experientaRoute","useNavigate","Helmet","DataGrid","DataTable","columns","field","headerName","width","type","rows","setRows","rand","data","i","row","height"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { get, remove } from '../Calls';\r\nimport { Button, Paper, Table, TableBody, TableCell, TableRow, TableContainer, TableHead, IconButton, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { experientaRoute } from '../ApiRoutes';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function DataTable() {\r\n    const columns = [\r\n        {field: 'IDExperienta', headerName: 'ID Experienta', width: 70 },\r\n        {field: 'PunctPlecare', headerName: 'Punct Plecare', width: 130 },\r\n        {field: 'PunctSosire', headerName: 'Punct Sosire', width: 130 },\r\n        {field: 'Localitate', headerName: 'Localitate', width: 90 },\r\n        {field: 'MijlocTransport', headerName: 'Mijloc Transport', width: 90 },\r\n        {field: 'OraPlecare', headerName: 'Ora Plecare', width: 90 },\r\n        {field: 'DurataCalatorie', headerName: 'Durata Calatorie', width: 90, type:'number'},\r\n        {field: 'GradAglomerare', headerName: 'Grad Aglomerare', width: 90, type:'number' },\r\n        {field: 'Observatii', headerName: 'Observatii', width: 90 },\r\n        {field: 'NivelSatisfactie', headerName: 'Nivel Satisfactie', width: 90,type:'number' },\r\n    ];\r\n\r\n    const [rows, setRows] = useState([]);\r\n    let rand = [];\r\n    useEffect(async () => {\r\n        let data = await get(experientaRoute);\r\n        setRows(data);\r\n        let i = 0;\r\n        for(row in rows){\r\n            rand[i] = row;\r\n            i++;\r\n        }\r\n        // rows.map((row) =>(\r\n        //     rand[i].IDExperienta = row.IDExperienta,\r\n        //     rand[i].PunctPlecare = row.PunctPlecare,\r\n        //     rand[i].PunctSosire = row.PunctSosire,\r\n        //     rand[i].Localitate = row.Localitate,\r\n        //     rand[i].MijlocTransport = row.MijlocTransport,\r\n        //     rand[i].OraPlecare = row.OraPlecare,\r\n        //     rand[i].DurataCalatorie = row.DurataCalatorie,\r\n        //     rand[i].GradAglomerare = row.GradAglomerare,\r\n        //     rand[i].Observatii = row.Observatii,\r\n        //     rand[i++].NivelSatisfactie = row.NivelSatisfactie\r\n        // ));\r\n    }, []);\r\n\r\n  return (\r\n\r\n    <div style={{ height: 400, width: '100%' }}>\r\n      <DataGrid\r\n        rows={rand}\r\n        columns={columns}\r\n        pageSize={5}\r\n        rowsPerPageOptions={[5]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}