{"ast":null,"code":"var _jsxFileName = \"D:\\\\1. ASE\\\\Anul III\\\\Sem 1\\\\Tehnologii web\\\\Proiect\\\\frontend\\\\src\\\\components\\\\test.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { get, remove } from '../Calls';\nimport { Button, Paper, Table, TableBody, TableCell, TableRow, TableContainer, TableHead, IconButton, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { experientaRoute } from '../ApiRoutes';\nimport { useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { FlexGrid, FlexGridColumn } from \"@grapecity/wijmo.react.grid\";\nimport { CollectionView } from \"@grapecity/wijmo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataTable() {\n  _s();\n\n  const columns = [{\n    field: 'IDExperienta',\n    headerName: 'ID Experienta',\n    width: 70\n  }, {\n    field: 'PunctPlecare',\n    headerName: 'Punct Plecare',\n    width: 130\n  }, {\n    field: 'PunctSosire',\n    headerName: 'Punct Sosire',\n    width: 130\n  }, {\n    field: 'Localitate',\n    headerName: 'Localitate',\n    width: 90\n  }, {\n    field: 'MijlocTransport',\n    headerName: 'Mijloc Transport',\n    width: 90\n  }, {\n    field: 'OraPlecare',\n    headerName: 'Ora Plecare',\n    width: 90\n  }, {\n    field: 'DurataCalatorie',\n    headerName: 'Durata Calatorie',\n    width: 90,\n    type: 'number'\n  }, {\n    field: 'GradAglomerare',\n    headerName: 'Grad Aglomerare',\n    width: 90,\n    type: 'number'\n  }, {\n    field: 'Observatii',\n    headerName: 'Observatii',\n    width: 90\n  }, {\n    field: 'NivelSatisfactie',\n    headerName: 'Nivel Satisfactie',\n    width: 90,\n    type: 'number'\n  }];\n  const [rows, setRows] = useState([]);\n  useEffect(async () => {\n    let data = await get(experientaRoute);\n    setRows(data);\n  });\n  const [view] = useState(() => {\n    const view = new CollectionView(rows.map(item => ({ ...item,\n      info: [item.IDExperienta, item.PunctPlecare, item.PunctSosire, item.Localitate, item.MijlocTransport, item.OraPlecare, item.DurataCalatorie, item.GradAglomerare, item.Observatii, item.NivelSatisfactie]\n    })));\n    return view;\n  });\n  return /*#__PURE__*/_jsxDEV(FlexGrid, {\n    itemsSource: view,\n    children: [/*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"IDExperienta\",\n      binding: \"IDExperienta\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"PunctPlecare\",\n      binding: \"PunctPlecare\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"PunctSosire\",\n      binding: \"PunctSosire\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"Localitate\",\n      binding: \"Localitate\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"MijlocTransport\",\n      binding: \"MijlocTransport\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"OraPlecare\",\n      binding: \"OraPlecare\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"DurataCalatorie\",\n      binding: \"DurataCalatorie\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"GradAglomerare\",\n      binding: \"GradAglomerare\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"Observatii\",\n      binding: \"Observatii\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"NivelSatisfactie\",\n      binding: \"NivelSatisfactie\",\n      width: \"*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FlexGridColumn, {\n      header: \"Info\",\n      binding: \"info\",\n      align: \"center\",\n      width: 180,\n      allowSorting: false,\n      cellTemplate: infoCellTemplate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this); //     const [rows, setRows] = useState([]);\n  //     let rand = [];\n  //     useEffect(async () => {\n  //         let data = await get(experientaRoute);\n  //         setRows(data);\n  //         let i = 0;\n  //         for(let row in rows){\n  //             rand[i] = row;\n  //             i++;\n  //         }\n  //         // rows.map((row) =>(\n  //         //     rand[i].IDExperienta = row.IDExperienta,\n  //         //     rand[i].PunctPlecare = row.PunctPlecare,\n  //         //     rand[i].PunctSosire = row.PunctSosire,\n  //         //     rand[i].Localitate = row.Localitate,\n  //         //     rand[i].MijlocTransport = row.MijlocTransport,\n  //         //     rand[i].OraPlecare = row.OraPlecare,\n  //         //     rand[i].DurataCalatorie = row.DurataCalatorie,\n  //         //     rand[i].GradAglomerare = row.GradAglomerare,\n  //         //     rand[i].Observatii = row.Observatii,\n  //         //     rand[i++].NivelSatisfactie = row.NivelSatisfactie\n  //         // ));\n  //     }, []);\n  //   return (\n  //     <div style={{ height: 400, width: '100%' }}>\n  //       <DataGrid\n  //         rows={rand}\n  //         columns={columns}\n  //         pageSize={5}\n  //         rowsPerPageOptions={[5]}\n  //       />\n  //     </div>\n  //   );\n}\n\n_s(DataTable, \"bW/sT724/uQFdyXspBuxQYo/QmU=\");\n\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["D:/1. ASE/Anul III/Sem 1/Tehnologii web/Proiect/frontend/src/components/test.js"],"names":["useState","useEffect","get","remove","Button","Paper","Table","TableBody","TableCell","TableRow","TableContainer","TableHead","IconButton","TextField","AddIcon","DeleteIcon","EditIcon","experientaRoute","useNavigate","Helmet","DataGrid","FlexGrid","FlexGridColumn","CollectionView","DataTable","columns","field","headerName","width","type","rows","setRows","data","view","map","item","info","IDExperienta","PunctPlecare","PunctSosire","Localitate","MijlocTransport","OraPlecare","DurataCalatorie","GradAglomerare","Observatii","NivelSatisfactie","infoCellTemplate"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { get, remove } from '../Calls';\r\nimport { Button, Paper, Table, TableBody, TableCell, TableRow, TableContainer, TableHead, IconButton, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { experientaRoute } from '../ApiRoutes';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { FlexGrid, FlexGridColumn } from \"@grapecity/wijmo.react.grid\"\r\nimport { CollectionView } from \"@grapecity/wijmo\";\r\n\r\n\r\n\r\n\r\nexport default function DataTable() {\r\n    const columns = [\r\n        {field: 'IDExperienta', headerName: 'ID Experienta', width: 70 },\r\n        {field: 'PunctPlecare', headerName: 'Punct Plecare', width: 130 },\r\n        {field: 'PunctSosire', headerName: 'Punct Sosire', width: 130 },\r\n        {field: 'Localitate', headerName: 'Localitate', width: 90 },\r\n        {field: 'MijlocTransport', headerName: 'Mijloc Transport', width: 90 },\r\n        {field: 'OraPlecare', headerName: 'Ora Plecare', width: 90 },\r\n        {field: 'DurataCalatorie', headerName: 'Durata Calatorie', width: 90, type:'number'},\r\n        {field: 'GradAglomerare', headerName: 'Grad Aglomerare', width: 90, type:'number' },\r\n        {field: 'Observatii', headerName: 'Observatii', width: 90 },\r\n        {field: 'NivelSatisfactie', headerName: 'Nivel Satisfactie', width: 90,type:'number' },\r\n    ];\r\n\r\n    const [rows, setRows] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        let data = await get(experientaRoute);\r\n        setRows(data);\r\n    })\r\n\r\n    const [view] = useState(() => {\r\n        const view = new CollectionView(\r\n            rows.map((item) => ({\r\n            ...item,\r\n            info: [item.IDExperienta, item.PunctPlecare, item.PunctSosire, item.Localitate, item.MijlocTransport,\r\n                 item.OraPlecare,item.DurataCalatorie,item.GradAglomerare,item.Observatii,item.NivelSatisfactie],\r\n          }))\r\n        );\r\n        return view;\r\n      });\r\n\r\n      return (\r\n        <FlexGrid itemsSource={view}>\r\n          <FlexGridColumn header=\"IDExperienta\" binding=\"IDExperienta\" width=\"*\" />\r\n          <FlexGridColumn header=\"PunctPlecare\" binding=\"PunctPlecare\" width=\"*\" />\r\n          <FlexGridColumn header=\"PunctSosire\" binding=\"PunctSosire\" width=\"*\" />\r\n          <FlexGridColumn header=\"Localitate\" binding=\"Localitate\" width=\"*\" />\r\n          <FlexGridColumn header=\"MijlocTransport\" binding=\"MijlocTransport\" width=\"*\" />\r\n          <FlexGridColumn header=\"OraPlecare\" binding=\"OraPlecare\" width=\"*\" />\r\n          <FlexGridColumn header=\"DurataCalatorie\" binding=\"DurataCalatorie\" width=\"*\" />\r\n          <FlexGridColumn header=\"GradAglomerare\" binding=\"GradAglomerare\" width=\"*\" />\r\n          <FlexGridColumn header=\"Observatii\" binding=\"Observatii\" width=\"*\" />\r\n          <FlexGridColumn header=\"NivelSatisfactie\" binding=\"NivelSatisfactie\" width=\"*\" />\r\n          <FlexGridColumn\r\n            header=\"Info\"\r\n            binding=\"info\"\r\n            align=\"center\"\r\n            width={180}\r\n            allowSorting={false}\r\n            cellTemplate={infoCellTemplate}\r\n          />\r\n        </FlexGrid>\r\n      );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     const [rows, setRows] = useState([]);\r\n//     let rand = [];\r\n//     useEffect(async () => {\r\n//         let data = await get(experientaRoute);\r\n//         setRows(data);\r\n//         let i = 0;\r\n//         for(let row in rows){\r\n//             rand[i] = row;\r\n//             i++;\r\n//         }\r\n//         // rows.map((row) =>(\r\n//         //     rand[i].IDExperienta = row.IDExperienta,\r\n//         //     rand[i].PunctPlecare = row.PunctPlecare,\r\n//         //     rand[i].PunctSosire = row.PunctSosire,\r\n//         //     rand[i].Localitate = row.Localitate,\r\n//         //     rand[i].MijlocTransport = row.MijlocTransport,\r\n//         //     rand[i].OraPlecare = row.OraPlecare,\r\n//         //     rand[i].DurataCalatorie = row.DurataCalatorie,\r\n//         //     rand[i].GradAglomerare = row.GradAglomerare,\r\n//         //     rand[i].Observatii = row.Observatii,\r\n//         //     rand[i++].NivelSatisfactie = row.NivelSatisfactie\r\n//         // ));\r\n//     }, []);\r\n\r\n//   return (\r\n\r\n//     <div style={{ height: 400, width: '100%' }}>\r\n//       <DataGrid\r\n//         rows={rand}\r\n//         columns={columns}\r\n//         pageSize={5}\r\n//         rowsPerPageOptions={[5]}\r\n//       />\r\n//     </div>\r\n//   );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}